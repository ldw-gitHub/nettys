p-66
Reactor模式

反应器模式

proactor模式

netty整体架构是reactor模式的完整体现

Responsive Design

文档Scalable IO in Java Doug Lea

Reactor Pattern

Reactor模式的角色构成（5种）

1、Handle（句柄或是描述符）：本质上表示一种资源，是由操作系统提供的；该资源用于表示一个个事件，比如说文件描述符，或是针对网络编程中的socket描述符
  事件即可用于外部，也可以来自内部；外部事件比如说客户端的连接请求，客户端发送过来的数据；内部事件比如操作系统产生的定时器事件等，它本质是一个文件描述
  符，Handle是事件产生的发源地。

2、Synchronous Event Demultiplexer（同步事件分离器）：它本身是一个系统的调用，用于等待事件的发生（事件可能是一个，也可能是多个），调用方在调用它的时候会
被阻塞，一直阻塞到同步事件分离器上有事件产生为止。对于linux来说，同步事件分离器指的就是常用的I/O多路复用，比如select、poll、epoll等。在java nio领域中，同步事件
分离器对应的组件就是Selecter；对应的阻塞方法就是select方法。

3、Event Handler(事件处理器)：本身由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。Netty相比于Java Nio来说，在事件处理器这个
角色上进行了一个升级，它为我们开发者提供了大量回调方法，供我们在特定事件产生时实现相应的回调方法进行业务逻辑的处理。

4、Concrete Event Handler(具体事件处理器)：事件处理器的实现。它本身实现了事件处理器提供的各个回调方法，从而实现了特定于业务的逻辑，它本质上就是我们所编写
           的一个个处理器的实现。

5、Initiation Dispatcher（初始分发器）：实际上就是Reactor角色。它本身定义了一些规范，这些规范用于控制事件的调用方式，同事又提供了应用进行事件处理器的注册、删除
等设施。它本身是整个事件处理器的核心所在，Initiation Dispatcher 会通过同步事件分离器来等待事件的发生，一旦事件发生，Initiation Dispatcher首先会分离出每一个
事件，然后调用事件处理器，最后调用相关的回调方法来处理这些事件。





